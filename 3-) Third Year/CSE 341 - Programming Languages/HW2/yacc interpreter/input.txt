(+ 3 (* 5 2))
(+ (** 3 2) 5)
(+ (+3 2) (+ (* 5 6) (- 5 3)))
(defvar x 3)
(disp x)
(defvar y (+ (+3 2) (+ (* 5 6) (- 5 3))) )
(set y (+ (+3 2) (+ (* 5 6) (- 5 3))) )
(disp (+ (+3 2) (+ (* 5 6) (- 5 3))) )
(or (and 1 0) (or 0 1))
(equal 1 (or (and 1 0) (or 0 1)) )
(not (equal 1 (or (and 1 0) (or 0 1)) ) )
'()
'(3 4 5 x)
(list 3 4 5 y)
(concat (list 3 4 5 y) '(3 4 5 x) )
(append (+ (+3 2) (+ (* 5 6) (- 5 3))) (list 3 4 5 y))
(disp (append (+ (+3 2) (+ (* 5 6) (- 5 3))) (list 3 4 5 y)))
(if (equal 1 (or (and 1 0) (or 0 1))) (append (+ (+3 2) (+ (* 5 6) (- 5 3))) (list 3 4 5 y)))
(if (and 0 (or (and 1 0) (or 0 1))) (append (+ (+3 2) (+ (* 5 6) (- 5 3))) (list 3 4 5 y)) (concat (list 3 4 5 y) '(3 4 5 x) ) )
(if (equal 1 (or (and 1 0) (or 0 1))) (+ (+3 2) (+ (* 5 6) (- 5 3))) )
(if (and 0 (or (and 1 0) (or 0 1))) (+ (+3 2) (+ (* 5 6) (- 5 3))) (+ (** 3 2) 5))
(defvar a (+ (*4 5) (/ 20 5)))
(disp a)
(defvar b (-(+2 1)(** 2 3)))
(disp b)
(list a b)
(defvar k true)
(disp k)
(defvar m false)
(disp m)
(and k m)
(or k m)
(not k)
(disp x)
(disp y)
(if k (+x y) (-x y))
(defvar j (if k (+x y) (-x y)) )
(disp j)
(less x y)
(deffun sum (a b)(+ 3 5))
(deffun conc (concat (list x y) '(3 4 5)))
(while (true) '(3 4 5))
(exit)

